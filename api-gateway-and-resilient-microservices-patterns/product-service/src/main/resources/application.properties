server.port=8082
# Database Settings
spring.datasource.url=jdbc:postgresql://localhost:5432/productservice_db
spring.datasource.username=postgres
spring.datasource.password=postgres
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# Hibernate ddl auto (create, create-drop, validate, update)
# Allows for auto creation of tables
spring.jpa.hibernate.ddl-auto=update
# when using @Slf4j, you need to add the following to show the logs in the terminal
logging.level.com=INFO
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
eureka.client.instance.preferIpAddress=true
eureka.instance.preferIpAddress=true
spring.application.name=product-service
############ Actuator Health Endpoints ############
## Spring Boot Actuator health information can be used to check the status of your running application.
## We can expose health endpoints via the Spring Boot actuator to know the exact state of the application at any given time.
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true
############  circuitbreaker configuration ############
# To reguister the Health Indicator to be able to see the diffrent states of the circuitbreaker (CLOSED, OPEN and HALF_OPEN)
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
# The emitted circuitbreaker events are stored in a circular consumer event buffer, and the size of this buffer  can be configured as follows
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
#Configures the type of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed.
# Sliding window can either be count-based or time-based.
# If the sliding window is COUNT_BASED, the last slidingWindowSize calls are recorded and aggregated.
# If the sliding window is TIME_BASED, the calls of the last slidingWindowSize seconds recorded and aggregated.
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
# Specifying slidingWindowSize=5, means we are 5 measurements 
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
# The failure rate threshold in percentage above which the CircuitBreaker should trip open and start short-circuiting calls
# This value is 50%, which means if half of the requests failed, the threshold will be reached.
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
# The time that the CircuitBreaker should wait before transitioning from open to half-open.
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=10s
# Configures the number of permitted calls when the CircuitBreaker is half open.
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
# If set to true, it means that the CircuitBreaker will automatically transition from open to half-open state and no call is needed to trigger the transition. 
# A thread is created to monitor all the instances of CircuitBreakers to transition them to HALF_OPEN once waitDurationInOpenState passes. 
# Whereas, if set to false the transition to HALF_OPEN only happens if a call is made, even after waitDurationInOpenState is passed. The advantage here is no thread monitors the state of all CircuitBreakers.
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true
#############  Timeout configeration ############
resilience4j.timelimiter.instances.inventory.timeout-duration=3s
############# Retry configerations ############
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=2s
############# Ratelimiter configerations ############
## The number of calls that are permitted during a period of time
resilience4j.ratelimiter.instances.inventory.limitForPeriod=2
## How often the RateLimiter refreshes the permissions is specified by limitRefreshPeriod
resilience4j.ratelimiter.instances.inventory.limitRefreshPeriod=5s
## limitForPeriod=2 and limitRefreshPeriod=5s means we allow only 2 calls within 5 seconds
resilience4j.ratelimiter.instances.inventory.timeoutDuration=10s
resilience4j.ratelimiter.instances.inventory.eventConsumerBufferSize=100
resilience4j.ratelimiter.instances.inventory.registerHealthIndicator=true



